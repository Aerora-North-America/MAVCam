grpc::Status Subscribe{{ name.upper_camel_case }}(grpc::ServerContext* /* context */, const mavcam::rpc::{{ plugin_name.lower_snake_case }}::Subscribe{{ name.upper_camel_case }}Request* {% if params %}request{% else %}/* request */{% endif %}, grpc::ServerWriter<mavcam::rpc::{{ plugin_name.lower_snake_case }}::{{ name.upper_camel_case }}Response>* writer) override
{
    auto stream_closed_promise = std::make_shared<std::promise<void>>();
    auto stream_closed_future = stream_closed_promise->get_future();
    register_stream_stop_promise(stream_closed_promise);

    _plugin->{{ name.lower_snake_case }}_async({% for param in params %}{% if not param.type_info.is_primitive %}translateFromRpc{{ param.name.upper_camel_case }}({% endif %}request->{{ param.name.lower_snake_case }}(){% if not param.type_info.is_primitive %}){% endif %}, {% endfor %}
        [this, &writer, &stream_closed_promise](
            {%- if has_result -%}mav::{{ plugin_name.upper_camel_case }}::Result result,{%- endif -%}
            const {% if return_type.is_repeated %}std::vector<{% if not return_type.is_primitive %}mav::{{ plugin_name.upper_camel_case }}::{% endif %}{{ return_type.inner_name }}>{% else %}{%- if not return_type.is_primitive %}mav::{{ plugin_name.upper_camel_case }}::{% endif %}{{ return_type.name }}{% endif %} {{ name.lower_snake_case }}) {

        mavcam::rpc::{{ plugin_name.lower_snake_case }}::{{ name.upper_camel_case }}Response rpc_response;
        {% if return_type.is_primitive %}
            rpc_response.set_{{ return_name.lower_snake_case }}({{ name.lower_snake_case }});
        {% elif return_type.is_enum %}
            rpc_response.set_{{ return_name.lower_snake_case }}(translateToRpc{{ return_type.name }}({{ name.lower_snake_case }}));
        {% elif return_type.is_repeated %}
            for (const auto& elem : {{ name.lower_snake_case }}) {
                auto* ptr = rpc_response.add_{{ return_name.lower_snake_case }}();
                ptr->CopyFrom(*translateToRpc{{ return_type.inner_name }}(elem).release());
            }
        {% else %}
            rpc_response.set_allocated_{{ return_name.lower_snake_case }}(translateToRpc{{ return_type.inner_name }}({{ name.lower_snake_case }}).release());
        {% endif %}

    {% if has_result %}
        auto rpc_result = translateToRpcResult(result);
        auto* rpc_{{ plugin_name.lower_snake_case }}_result = new rpc::{{ plugin_name.lower_snake_case }}::{{ plugin_name.upper_camel_case }}Result();
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result_str(ss.str());
        rpc_response.set_allocated_{{ plugin_name.lower_snake_case }}_result(rpc_{{ plugin_name.lower_snake_case }}_result);
    {% endif %}

        writer->Write(rpc_response);
        unregister_stream_stop_promise(stream_closed_promise);
        stream_closed_promise->set_value();
    });

    stream_closed_future.wait();

    return ::grpc::Status::OK;
}
